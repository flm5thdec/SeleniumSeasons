******************************
Season 1 - Selenium
******************************



Stable: 4.28.1 (January 23, 2025)


********************************************************
Day 19 -  7th Feb Friday
********************************************************

https://www.selenium.dev/

Selenium WebDriver : 

Selenium automates browsers. That's it!

using Selenium we can automate web apps . That's it!

web apps means apps which can be launched on web browsers (chrome , edge , firefox , safari etc ..)

e.g irctc , facebook , etc ..

Selenium API ( Selenium + Java ) -> it comes in a form of jar 

Java

Stable: 4.28.1 (January 23, 2025)

selenium-server-standalone-3.141.59.jar

ChromeDriver(C)

selenium-server-standalone-3.141.59.jar



 java.lang.IllegalStateException:
 The path to the driver executable must be set by the 
 webdriver.chrome.driver system property; 
 for more information, see https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver. 
 The latest version can be downloaded from http://chromedriver.storage.googleapis.com/index.html
 
 
 use below link for downloading .exe files 
 
 https://googlechromelabs.github.io/chrome-for-testing/
 
 chrome version : 133


2) using 3.141.59 + WebDriverManager jar 

webdrivermanager-5.9.2-fat.jar


???????????????????????????????????????????????
Assignment : 3

write the scripts to launch 
firefox and edge browsers 


flmtechteam.testing@gmail.com

???????????????????????????????????????????????							

********************************************************
Day 20 -  12th Feb Wednesday
********************************************************

--------------------------------------------
WebDriver methods
--------------------------------------------
org.openqa.selenium

- WebDriver  ( 5 sub interfaces and 13 methods)
	org.openqa.selenium.WebDriver.Navigation
	org.openqa.selenium.WebDriver.Options
	org.openqa.selenium.WebDriver.TargetLocator
	org.openqa.selenium.WebDriver.Timeouts
	org.openqa.selenium.WebDriver.Window
	








-----------------------------------
get(String): void  -> this will launch the app (whose URL given as String)

here String is nothing but the URL of web app or Page 

e.g https://www.facebook.com/

-------------------------------------

close():void -> this will close the tab/window on which webdriver focus 


--------------------------------------

quit():void -> this will close all the tabs/windows which are opened during the session 

-> it will end the wedriver session that means 

it will kill the chromedriver.exe 

-------------------------------------------

manage(): Options  --> this is used to handle cookies , synchronizations and window sizes 



addCookie(Cookie)
deleteAllCookies()
deleteCookie(Cookie)
deleteCookieNamed(String)
getCookieNamed(String)
getCookies()
logs()
timeouts()
window() : 
    fullscreen()
	getPosition()
	getSize()
	maximize()  --> this will maximize the browser 
	minimize()
	setPosition(Point)
	setSize(Dimension)


driver.manage().window().maximize();


--------------------------------------------------

getTitle():String  -->this will return the title of page on which webdriver focus is 

-------------------------------------------------
getCurrentUrl():String --> this will return the url present in address bar of page on which webdriver focus is 
----------------------------------------------------

getPageSource():String --> this will return the page source(html content)  of page on which webdriver focus is 

-----------------------------------------------------

getWindowHandle():String --> returns a unique window/tab id in form of hexa decimal ( 0-9 A-F)

e.g 446E742200CB94BB88D868192E234297

-----------------------------------------------------------

getWindowHandles():Set<String> 

 --> returns a unique window/tab id's of the opened windows/tabs in that session  in form of hexa decimal ( 0-9 A-F)


********************************************************
Day 21 -  13th Feb Thursday
********************************************************


navigate():Navigation

	back()
	forward()
	refresh()
	to(String)
	to(URL)
	
--------------------------------------------------------

switchTo():TargetLocator - this is used to handle alerts, frames and window/tabs 

	activeElement()
	alert()
	defaultContent()
	frame(int)
	frame(String)
	frame(WebElement)
	newWindow(WindowType)
	parentFrame()
	window(String)

----------------------------------------------

findElement(By):WebElement 
-> this will focus on the element based on locator strategy

-----------------------------------------------
findElements(By):List<WebElement> 

------------------------------------------------

Locators Strategy or By class methods 

className(String)
cssSelector(String)
id(String)
linkText(String)
name(String)
partialLinkText(String)
tagName(String)
xpath(String)


HTML Terminologies 


<input type="text" name="username" id="username" class="login_input" value="" fdprocessedid="nir3xv">

<a href="Register.php">New User Register Here</a>


<tagname attribute1="value of attribute1" attribute2="value of attribute2" .....>

<tagname attribute1="value of attribute1" attribute2="value of attribute2" .....>text on element</tagname>


1) locators based on attributes 

id(String):By
name(String)
className(String)

2) based on text present on links 

linkText(String):By 
partialLinkText(String):By 

3) based on attributes , tagName and text on element 

xpath(String)

cssSelector(String)

4) based on only tagname  --> not prefered for single element focus ,mostly used for multiple elements 

tagName(String):By 

------------------------------------------
WebElement Methods 
------------------------------------------

clear()
click()
findElement(By)
findElements(By)
getAttribute(String)
getCssValue(String)
getLocation()
getRect()
getSize()
getTagName()
getText()
isDisplayed()
isEnabled()
isSelected()
sendKeys(CharSequence...)
submit()

-----------------------------
getAccessibleName()
getAriaRole()
getDomAttribute(String)
getDomProperty(String)
getShadowRoot()